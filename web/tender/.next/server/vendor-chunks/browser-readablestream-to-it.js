"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/browser-readablestream-to-it";
exports.ids = ["vendor-chunks/browser-readablestream-to-it"];
exports.modules = {

/***/ "(ssr)/./node_modules/browser-readablestream-to-it/dist/src/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/browser-readablestream-to-it/dist/src/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ browserReadableStreamToIt)\n/* harmony export */ });\n/**\n * @packageDocumentation\n *\n * Allows treating a browser readable stream as an async iterator.\n *\n * @example\n *\n * ```javascript\n * import toIt from 'browser-readablestream-to-it'\n * import all from 'it-all'\n *\n * const content = [0, 1, 2, 3, 4]\n *\n * const stream = new ReadableStream({\n *   start(controller) {\n *     for (let i = 0; i < content.length; i++) {\n *       controller.enqueue(content[i])\n *     }\n *\n *     controller.close()\n *   }\n * })\n *\n * const arr = await all(toIt(stream))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n *\n * ## preventCancel\n *\n * By default a readable stream will have [.cancel](https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream/cancel) called on it once it has ended or\n * reading has stopped prematurely.\n *\n * To prevent this behaviour, pass `preventCancel: true` as an option:\n *\n * ```javascript\n * const arr = await all(toIt(stream, { preventCancel: true }))\n *\n * console.info(arr) // 0, 1, 2, 3, 4\n * ```\n */\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n */\nasync function* browserReadableStreamToIt(stream, options = {}) {\n    const reader = stream.getReader();\n    try {\n        while (true) {\n            const result = await reader.read();\n            if (result.done) {\n                return;\n            }\n            yield result.value;\n        }\n    }\n    finally {\n        if (options.preventCancel !== true) {\n            await reader.cancel();\n        }\n        reader.releaseLock();\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1yZWFkYWJsZXN0cmVhbS10by1pdC9kaXN0L3NyYy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9CQUFvQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MscUJBQXFCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMscUJBQXFCO0FBQzlEO0FBQ0E7QUFDZSw4REFBOEQ7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGVuZGVyLy4vbm9kZV9tb2R1bGVzL2Jyb3dzZXItcmVhZGFibGVzdHJlYW0tdG8taXQvZGlzdC9zcmMvaW5kZXguanM/YWRiZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICpcbiAqIEFsbG93cyB0cmVhdGluZyBhIGJyb3dzZXIgcmVhZGFibGUgc3RyZWFtIGFzIGFuIGFzeW5jIGl0ZXJhdG9yLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogaW1wb3J0IHRvSXQgZnJvbSAnYnJvd3Nlci1yZWFkYWJsZXN0cmVhbS10by1pdCdcbiAqIGltcG9ydCBhbGwgZnJvbSAnaXQtYWxsJ1xuICpcbiAqIGNvbnN0IGNvbnRlbnQgPSBbMCwgMSwgMiwgMywgNF1cbiAqXG4gKiBjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICogICBzdGFydChjb250cm9sbGVyKSB7XG4gKiAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKSB7XG4gKiAgICAgICBjb250cm9sbGVyLmVucXVldWUoY29udGVudFtpXSlcbiAqICAgICB9XG4gKlxuICogICAgIGNvbnRyb2xsZXIuY2xvc2UoKVxuICogICB9XG4gKiB9KVxuICpcbiAqIGNvbnN0IGFyciA9IGF3YWl0IGFsbCh0b0l0KHN0cmVhbSkpXG4gKlxuICogY29uc29sZS5pbmZvKGFycikgLy8gMCwgMSwgMiwgMywgNFxuICogYGBgXG4gKlxuICogIyMgcHJldmVudENhbmNlbFxuICpcbiAqIEJ5IGRlZmF1bHQgYSByZWFkYWJsZSBzdHJlYW0gd2lsbCBoYXZlIFsuY2FuY2VsXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUmVhZGFibGVTdHJlYW0vY2FuY2VsKSBjYWxsZWQgb24gaXQgb25jZSBpdCBoYXMgZW5kZWQgb3JcbiAqIHJlYWRpbmcgaGFzIHN0b3BwZWQgcHJlbWF0dXJlbHkuXG4gKlxuICogVG8gcHJldmVudCB0aGlzIGJlaGF2aW91ciwgcGFzcyBgcHJldmVudENhbmNlbDogdHJ1ZWAgYXMgYW4gb3B0aW9uOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGNvbnN0IGFyciA9IGF3YWl0IGFsbCh0b0l0KHN0cmVhbSwgeyBwcmV2ZW50Q2FuY2VsOiB0cnVlIH0pKVxuICpcbiAqIGNvbnNvbGUuaW5mbyhhcnIpIC8vIDAsIDEsIDIsIDMsIDRcbiAqIGBgYFxuICovXG4vKipcbiAqIFR1cm5zIGEgYnJvd3NlciByZWFkYWJsZSBzdHJlYW0gaW50byBhbiBhc3luYyBpdGVyYWJsZS4gQXN5bmMgaXRlcmF0aW9uIG92ZXJcbiAqIHJldHVybmVkIGl0ZXJhYmxlIHdpbGwgbG9jayBnaXZlIHN0cmVhbSwgcHJldmVudGluZyBhbnkgb3RoZXIgY29uc3VtZXIgZnJvbVxuICogYWNxdWlyaW5nIGEgcmVhZGVyLiBUaGUgbG9jayB3aWxsIGJlIHJlbGVhc2VkIGlmIGl0ZXJhdGlvbiBsb29wIGlzIGJyb2tlbi4gVG9cbiAqIHByZXZlbnQgc3RyZWFtIGNhbmNlbGxpbmcgb3B0aW9uYWwgYHsgcHJldmVudENhbmNlbDogdHJ1ZSB9YCBjb3VsZCBiZSBwYXNzZWRcbiAqIGFzIGEgc2Vjb25kIGFyZ3VtZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiogYnJvd3NlclJlYWRhYmxlU3RyZWFtVG9JdChzdHJlYW0sIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVhZGVyLnJlYWQoKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIHJlc3VsdC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWYgKG9wdGlvbnMucHJldmVudENhbmNlbCAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgYXdhaXQgcmVhZGVyLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/browser-readablestream-to-it/dist/src/index.js\n");

/***/ })

};
;